OOP Concepts in Java Tutorial Ref---> https://javacody.com/oop-concepts-in-java-tutorial/
What is Object-Oriented Programming (OOP)?
Object-Oriented Programming (OOP) is a programming paradigm based on the concept of “objects”, which contain data and behavior. 
These objects represent real-world entities like cars, books, or students.

Think about your mobile phone. It has properties like brand, model, and color. It also has behaviors like making calls or playing music. In programming, these properties and behaviors are combined to form objects.
Java is one of the most powerful languages that uses OOP principles to make your programs modular, reusable, and maintainable.

Why Use OOP in Java?

- Real-world modeling
- Better code organization
- Easier maintenance
- Code reusability
- Security with encapsulation

Main OOP Concepts in Java Tutorial?
- Class and Object
- Encapsulation
- Inheritance
- Polymorphism
- Abstraction
Let’s explore each one with simple examples.

1. Class and Object in Java (Deep Dive)
What is a Class?
A class in Java is a user-defined blueprint or prototype from which objects are created.
It represents a set of properties (fields) and behaviors (methods) that the object can have.

Think of a class as a blueprint of a house—you can create multiple houses (objects) from the same blueprint, each having its own identity but based on the same structure.
Syntax:
class Person {
    String name;
    int age;

    void introduce() {
        System.out.println("Hi, my name is " + name + " and I'm " + age + " years old.");
    }
}
What is an Object?
An object is an instance of a class. When a class is defined, no memory is allocated until an object is created from it.

Object Creation Example:
public class Main {
    public static void main(String[] args) {
        Person p1 = new Person();  // Object created
        p1.name = "John";
        p1.age = 25;
        p1.introduce();
    }
}
Real-World Example:
Imagine a “Car” class. You could create multiple Car objects like honda, toyota, or bmw, each with its own color and speed but all based on the same class structure.

2. Encapsulation in Java (In-Depth)
What is Encapsulation?
Encapsulation is the process of binding data and the methods that manipulate that data together, while keeping both safe from outside interference and misuse.

This is done using:

Private variables
Public getter and setter methods
Code Example:
class Student {
    private String name;
    private int marks;

    public void setName(String name) {
        this.name = name; // Validation logic can be added
    }

    public String getName() {
        return name;
    }

    public void setMarks(int marks) {
        if (marks >= 0 && marks <= 100) {
            this.marks = marks;
        }
    }

    public int getMarks() {
        return marks;
    }
}

Why is Encapsulation Important?
Protects the data from accidental corruption
Encourages code modularity
Improves security and control
Real-World Analogy:
Think of a medicine capsule—the components inside are hidden, but the whole unit is delivered together. That’s encapsulation!

3. Inheritance in Java 
What is Inheritance?
Inheritance is a mechanism in Java by which one class can inherit fields and methods from another class. 
It promotes code reuse and establishes a parent-child relationship.

Syntax:
class Animal {
    void breathe() {
        System.out.println("This animal breathes air.");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks!");
    }
}
Code Usage:
public class Main {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.breathe(); // inherited method
        d.bark();    // own method
    }
}
Types of Inheritance:
1) Single Inheritance
2) Multilevel Inheritance
3) Hierarchical Inheritance
Java does not support multiple inheritance with classes to avoid ambiguity but does support it using interfaces.

Real-World Example:
A “Manager” class may inherit from an “Employee” class. Manager gets all common employee properties, like ID and salary, while adding unique behaviors like assigning tasks.

4. What is Polymorphism?
Polymorphism means “many forms”. In Java, it allows one action to behave differently based on the object calling it.

There are two types:
1) Compile-time (Method Overloading)
2) Runtime (Method Overriding)

1) Method Overloading (Compile-Time Polymorphism)
   Same method name, different parameters.

class MathUtils {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
}
2) Method Overriding (Runtime Polymorphism)
   Subclass provides a specific implementation of a method already defined in its parent class. Same method name and same parameter list.

class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Cat extends Animal {
    void makeSound() {
        System.out.println("Cat meows");
    }
}
Real-World Analogy:
A printer object might have one method: print(). But if it’s a LaserPrinter, it prints differently than an InkJetPrinter. Same interface, different behaviors = polymorphism.

5.What is Abstraction?
Abstraction means showing only essential features and hiding the unnecessary details.

Java supports abstraction using:
Abstract Classes
Interfaces

Abstract Class Example:
abstract class Shape {
    abstract void draw();
}

class Rectangle extends Shape {
    void draw() {
        System.out.println("Drawing Rectangle");
    }
}
Interface Example:
interface Animal {
    void eat();
}

class Cow implements Animal {
    public void eat() {
        System.out.println("Cow eats grass");
    }
}

When to Use Abstract Class vs Interface?
Use abstract classes when some common implementation is shared.
Use interfaces when you want to enforce a contract without implementation.
Real-World Analogy:
Think of a TV remote interface. You press the button (method), but how it works inside (implementation) is hidden from you.

Real-World Scenario to Understand OOP
Scenario:
Imagine you are developing an Online Shopping System.

Classes: Customer, Product, Cart, Payment
Objects: John (Customer), iPhone (Product)
Encapsulation: Payment details are hidden
Inheritance: CreditCardPayment inherits from Payment
Polymorphism: Different payment methods – one method pay() but many forms
Abstraction: Abstract Payment process class handles general logic, specific types handle card or wallet
By structuring your program using OOP concepts, your code becomes organized, scalable, and easy to maintain.

OOP Concepts in Java with Real-Life Example
Let’s build a mini-project:
Example:
abstract class Vehicle {
    abstract void start();
}

class Bike extends Vehicle {
    void start() {
        System.out.println("Bike starts with kick");
    }
}

class Car extends Vehicle {
    void start() {
        System.out.println("Car starts with button");
    }
}

public class TestVehicle {
    public static void main(String[] args) {
        Vehicle v1 = new Bike();
        Vehicle v2 = new Car();
        v1.start();
        v2.start();
    }
}
✔️ This small program demonstrates abstraction, inheritance, and polymorphism together.

Difference between Overloading and Overriding?
Feature	Overloading	Overriding
Definition	Same method name, different params	Same method signature, subclass
Compile-time/Runtime	Compile-time	Runtime
Example	add(int, int) vs. add(double, double)	toString() in Object class overridden in custom class
What is an Interface and how is it different from Abstract Class?
Feature	Interface	Abstract Class
Methods	Only abstract (Java 8+: default/static allowed)	Abstract + concrete methods
Multiple Inheritance	Supported	Not Supported
Variables	public static final	Instance variables allowed

Can we Inherit Constructor?
Answer: We cannot inherit constructor

Explain Aggregation with an example?
Answer: Aggregation is a “Has-A” relationship with weaker association.

Example: Department has multiple Employees.
Copy
class Employee {
    String name;
}

class Department {
    List<Employee> employees;
}
Can you explain the SOLID principles in relation to OOP in Java?
Answer:

S – Single Responsibility Principle
O – Open/Closed Principle
L – Liskov Substitution Principle
I – Interface Segregation Principle
D – Dependency Inversion Principle

What is the role of the super keyword in Java?
Answer:Refers to the parent class constructor/method/field.
Example: super() calls the superclass constructor.

What is the role of this keyword in Java?
Answer:
Refers to the current instance of the class. Useful to resolve ambiguity between instance variables and parameters.

What is method hiding in Java?
Answer:If a subclass defines a static method with the same signature as in parent class, it is called method hiding.

Only applicable to static methods.
Explain Constructor Overloading.
Answer:
Having multiple constructors in a class with different parameter lists. Helps in creating objects in different ways.

class Person {
    Person() {}
    Person(String name) {}
}

Can we override a static method in Java ?
Answer:No. Static methods are class-level and not subject to runtime polymorphism. We can hide them but not override them.

What is Covariant Return Type?
Answer:
When overriding a method, the return type of the overriding method can be a subclass of the return type declared in the parent class.

Constructor Chaining?
---------------------
-> When we call one constructor from another constructor it will form chain like flow structure. This is called as constructor chaining
-> This can be achieved by using this() keyword or Creating Object in another constructor


What is Object Cloning?
Answer:
Creating an exact copy of an object using the clone() method.
The class should implement Cloneable interface.

Why is multiple inheritance not supported in Java?
Answer:
To avoid ambiguity (Diamond Problem). 
Note: Java classes does not support mulitple inheritance because of diamond problem
diamond problem: Suppose we inherit a method from A->B->D  and Same method is inherited from A->C->D, then confusion from which parent class method is inherited to child class D.
This is called as DIAMOND PROBLEM. Hence in java classes does not support multiple inheritance.
Instead, Java uses Interfaces to achieve multiple inheritance.

What is the difference between an abstract class and an interface in Java 8?
Answer:

Abstract class can have both abstract and concrete methods; interfaces can have default and static methods (from Java 8).
Interfaces support multiple inheritance; abstract classes don’t.

Can we instantiate an abstract class?
Answer: No. Abstract classes cannot be instantiated directly. They must be subclassed, and their abstract methods implemented.

What is constructor chaining in Java?
Answer:
Constructor chaining refers to calling one constructor from another within the same class using this() or from parent class using super().

What is the default access modifier for a class in Java?
Answer:If no access modifier is specified, the class has default (package-private) access

What is final keyword in OOP concepts?
Answer:
final can be used with:
Variables – Makes value constant.
Methods – Prevents overriding.
Classes – Prevents inheritance.

What is a nested class in Java?
Answer:
A class defined inside another class. Types:
Static nested class
Inner class
Local class
Anonymous class

Can a constructor be overridden in Java?
Answer: No. Constructors cannot be overridden because they are not inherited.

What is multiple inheritance and how does Java solve it?
Answer:
Multiple inheritance refers to a class having more than one parent.
Java solves potential conflicts using interfaces with default methods and explicitly overriding them.

What is diamond problem in OOP and how does Java handle it?
Answer:
The diamond problem occurs in multiple inheritance when two superclasses define the same method.
Java avoids it by disallowing multiple inheritance of classes and using interfaces with explicit overrides.

What is the difference between shallow copy and deep copy?
Feature	Shallow Copy	Deep Copy
Definition	Copies reference	Copies object and nested objects
Default in Java	clone() (by default)	Custom implementation required

What is the purpose of instanceof in Java?
Answer:
instanceof checks whether an object is an instance of a particular class or subclass.

Frequently Asked Questions (FAQs) on OOP Concepts in Java Tutorial
What is Inheritance in Java?
Inheritance is one of the core OOP concepts in Java where one class acquires the properties (fields) and behaviors (methods) of another class. 
It helps with code reusability and maintains hierarchical relationships.

Example:
class Animal { }
class Dog extends Animal { }
What is Polymorphism in Java?
Polymorphism means many forms. It allows the same method to perform different behaviors based on the object that’s calling it. Java supports:

Compile-time polymorphism (Method Overloading)
Runtime polymorphism (Method Overriding)
What is Encapsulation in Java?
Encapsulation is about protecting the data of a class by declaring its variables private and exposing them through public getter/setter methods. It promotes data hiding and secure code.

What is Abstraction in Java?
Abstraction is about hiding unnecessary implementation details from the user and showing only what’s relevant. In Java, you can achieve abstraction using abstract classes or interfaces.

What is a Class in Java?
A class in Java is a template or blueprint for creating objects. It contains variables (attributes) and methods (functions) that define the behavior of the objects.

What is an Object in Java?
An object is an instance of a class. It represents a real-world entity with state (data) and behavior (methods).

What Are the Advantages of Java OOP Concepts?
Code Reusability with Inheritance
Modularity with Classes and Objects
Data Security with Encapsulation
Flexibility and Scalability with Polymorphism
Clear Design and Maintenance with Abstraction
What is Association in Java?
Association represents a relationship between two classes, where one class uses the functionalities of another class. It is represented as IS-A relationship

Example: A Teacher teaches Students.

What is Composition in Java?
Composition is a strong form of association where the existence of one class depends on the other. If the container object is destroyed, so are the contained objects. Also called a has-A relationship
Example: A House has Rooms. Without the House, Rooms don’t exist.

What is Aggregation in Java?
Aggregation is a weaker form of association, where one class can exist independently of the other.
Example: A Department has Teachers. Teachers can exist even if the Department is removed.

What is Single Inheritance in Java?
Single inheritance refers to a child class inheriting from only one parent class. Java supports single inheritance to maintain simplicity and avoid ambiguity in code.
class Animal { }
class Dog extends Animal { }
