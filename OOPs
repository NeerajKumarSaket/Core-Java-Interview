OOP Concepts in Java Tutorial Ref---> https://javacody.com/oop-concepts-in-java-tutorial/

Core OOP Basics

What is Object-Oriented Programming (OOP)?
Why use OOP in Java? OR What are the advantages of Java OOP concepts?
What are the main OOP concepts in Java?
What is a Class in Java?
What is an Object in Java?
Can we override static methods?

Encapsulation
What is Encapsulation?
Why is Encapsulation important?

Inheritance
What is Inheritance?
Why is multiple inheritance not supported in Java?

Polymorphism
What is Polymorphism?
What is Method Overloading (Compile-time Polymorphism)?
What is Method Overriding (Runtime Polymorphism)?

Abstraction
What is Abstraction? OR How to achieve Abstraction in Java?
When to use Abstract Class vs Interface?
Can we inherit constructor?

Comparison Questions
What is the difference between Overloading and Overriding?
What is an Interface and how is it different from Abstract Class?

Advanced OOP Concepts
Explain Aggregation with an example.
Can you explain the SOLID principles in relation to OOP in Java?
What is the role of the super keyword in Java?
What is the role of this keyword in Java?
What is method hiding in Java?
Explain Constructor Overloading.
Can we override a static method in Java?
What is Covariant Return Type?
What is Constructor Chaining?
What is Object Cloning?
What is the difference between an abstract class and an interface in Java 8?
Can we instantiate an abstract class?
What is constructor chaining in Java?
What is the default access modifier for a class in Java?
Final / Finally / Finalize
What is final keyword in OOP concepts?
What is finally in Java?
What is finalize() in Java?
Nested & Special Cases
What is a nested class in Java?
Can a constructor be overridden in Java?
What is multiple inheritance and how does Java solve it?
What is diamond problem in OOP and how does Java handle it?
What is the purpose of instanceof in Java?
Relationships (Association, Aggregation, Composition)
What is Association in Java?
What is Composition in Java?
What is Aggregation in Java?
What is Single Inheritance in Java?

Copying Objects
What is the difference between shallow copy and deep copy?
=================================================================================================================
1)What is Object-Oriented Programming (OOP)?
Object-Oriented Programming (OOP) is a programming paradigm based on the concept of ‚Äúobjects‚Äù, which contain data and behavior. 
These objects represent real-world entities like cars, books, or students.

Think about your mobile phone. It has properties like brand, model, and color. It also has behaviors like making calls or playing music. In programming, these properties and behaviors are combined to form objects.
Java is one of the most powerful languages that uses OOP principles to make your programs modular, reusable, and maintainable.

Why Use OOP in Java ? OR What Are the Advantages of Java OOP Concepts ?
Code Reusability with Inheritance
Modularity with Classes and Objects
Data Security with Encapsulation
Flexibility and Scalability with Polymorphism
Clear Design and Maintenance with Abstraction

Main OOP Concepts in Java Tutorial?
- Class and Object
Four Pillers of oops
- Encapsulation
- Inheritance
- Polymorphism
- Abstraction

1. Class and Object in Java
What is a Class in Java?
A class in Java is a user-defined blueprint or prototype for creating objects. It contains variables (attributes) and methods that define the behavior of the objects.
every class have super class by default that is object class in java.
Syntax:
class Person {
    String name;
    int age;

    void introduce() {
        System.out.println("Hi, my name is " + name + " and I'm " + age + " years old.");
    }
}

2)What is an Object?
An object is an instance of a class. When a class is defined, no memory is allocated until an object is created from it.
Object Creation Example:
public class Main {
    public static void main(String[] args) {
        Person p1 = new Person();  // Object created
        p1.name = "John";
        p1.age = 25;
        p1.introduce();//method calling
    }
}
Real-World Example:
Imagine a ‚ÄúCar‚Äù class. You could create multiple Car objects like honda, toyota, or bmw, each with its own color and speed but all based on the same class structure.

new keyword:
##############
-> Using new keyword we send request to class to create object
-> Once object is created new keyword will get objects's address and stores that in a reference variable
Syntax to create object:
-------------------------
ClassName variableName = new ClassName();
################################################
Question : Can we Override static methods?
-> We cannot override static methods, as we cannot inherit static methods
########################################
================================================================Encapsulation===============================================================
3) What is Encapsulation ?
Encapsulation is the process of bundling data (variables) and the methods that operate on that data into a single unit (class) while restricting direct access to the data.
This is typically achieved by declaring variables as private and providing controlled access through public getter and setter methods, thereby ensuring data hiding and maintaining code security.

This is done using:
Private variables
Public getter and setter methods

Code Example:
class Student {
    private String name;
    private int marks;

    public void setName(String name) {
        this.name = name; // Validation logic can be added
    }

    public String getName() {
        return name;
    }

    public void setMarks(int marks) {
        if (marks >= 0 && marks <= 100) {
            this.marks = marks;
        }
    }

    public int getMarks() {
        return marks;
    }
}

4)Why is Encapsulation Important?
Protects the data from accidental corruption
Encourages code modularity
Improves security and control
Real-World Analogy:
Think of a medicine capsule‚Äîthe components inside are hidden, but the whole unit is delivered together. That‚Äôs encapsulation!

================================================================Inhertance=================================================================
5) What is Inheritance?
Inheritance is a mechanism in Java by which one class can inherit fields and methods from another class. or  Inheritance is one of the core OOP concepts in Java where one class acquires the properties (fields) and behaviors (methods) of another class. 
It promotes code reuseability and establishes a parent-child relationship.
Syntax:
class Animal {
    void breathe() {
        System.out.println("This animal breathes air.");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks!");
    }
}
Code Usage:
public class Main {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.breathe(); // inherited method
        d.bark();    // own method
    }
}
Types of Inheritance:
1) Single Inheritance ‚Äì One class inherits from another. class A ‚Üí class B
2) Multilevel Inheritance ‚Äì A class inherits from a class which already inherits from another. class A ‚Üí class B ‚Üí class C
3) Hierarchical Inheritance ‚Äì Multiple classes inherit from a single parent class. class A ‚Üí class B, class A ‚Üí class C
Note: Java does not support multiple inheritance with classes to avoid ambiguity (like the Diamond Problem), but it supports multiple inheritance using interfaces.
Real-World Example:
A ‚ÄúManager‚Äù class may inherit from an ‚ÄúEmployee‚Äù class. Manager gets all common employee properties, like ID and salary, while adding unique behaviors like assigning tasks.

‚úÖ 4. Multiple Inheritance using Interface
Definition: A class inherits from multiple interfaces.
interface A {
    void msgA(); // Interface A method
}

interface B {
    void msgB(); // Interface B method
}
class C implements A, B { // C implements both A and B
    public void msgA() {
        System.out.println("Message from A");
    }
    public void msgB() {
        System.out.println("Message from B");
    }
}
üìù Class C uses methods from both interfaces A and B. Java allows this via interface only.

6) Why is multiple inheritance not supported in Java?
Answer: To avoid ambiguity (Diamond Problem). 
Note: Java classes does not support mulitple inheritance because of diamond problem
diamond problem: Suppose we inherit a method from A->B->D  and Same method is inherited from A->C->D, then confusion from which parent class method is inherited to child class D.
This is called as DIAMOND PROBLEM. Hence in java classes does not support multiple inheritance.
Instead, Java uses Interfaces to achieve multiple inheritance.

===================================================================================Polymorphism=========================================================
7) What is Polymorphism?
It allows methods to behave differently based on the object calling them, even if the method is invoked through a common reference type.
Polymorphism means ‚Äúmany forms‚Äù. In Java, it allows one action to behave differently based on the object calling it.

There are two types:
1) Compile-time (Method Overloading)
2) Runtime (Method Overriding)

1) Method Overloading (Compile-Time Polymorphism)
   When multiple methods have the same name but different parameter lists in the same class.
class MathUtils {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
}
2) Method Overriding (Runtime Polymorphism)
 When a child class provides a specific implementation of a method that is already defined in its parent class.
 The method in the child class must have the same name, same return type, and same parameter list as in the parent class.
// Parent class
class Animal {
    // Method defined in parent class
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}
// Child class that overrides the method from parent class
class Dog extends Animal {
    // Same method name, same return type, same parameter list
    @Override  // Optional annotation, but recommended (ensures correct overriding)
    void makeSound() {
        System.out.println("Dog barks");
    }
}
Real-World Analogy:
A printer object might have one method: print(). But if it‚Äôs a LaserPrinter, it prints differently than an InkJetPrinter. Same interface, different behaviors = polymorphism.

========================================================Abstraction=============================================================
8) What is Abstraction?OR  How to Achieve Abstraction in Java?
Abstraction is about hiding unnecessary implementation details from the user and showing only what‚Äôs relevant.
In Java, you can achieve abstraction using abstract classes or interfaces.
Abstract Classes
Interfaces

Abstract Class Example:
abstract class Shape {
    abstract void draw();
}
class Rectangle extends Shape {
    void draw() {
        System.out.println("Drawing Rectangle");
    }
}

Interface Example:
interface Animal {
    void eat();
}

class Cow implements Animal {
    public void eat() {
        System.out.println("Cow eats grass");
    }
}

9) When to Use Abstract Class vs Interface?
Use abstract classes when some common implementation is shared.
Use interfaces when you want to enforce a contract without implementation.
Real-World Analogy:
Think of a TV remote interface. You press the button (method), but how it works inside (implementation) is hidden from you.

10) Can we Inherit Constructor ?
Answer: NO, We cannot inherit constructor
Constructors are not members of the class, so they can‚Äôt be inherited.
However, the child class can call the parent constructor using super().
example-// Parent class A
class A {
    // Constructor of class A
    A() {
        System.out.println("Constructor of A");
    }
}

// Child class B extends class A
class B extends A {
    // Constructor of class B
    B() {
        super();  // ‚úÖ This is NOT inheritance of constructor
                 // ‚úÖ It's just a call to parent constructor
                // ‚úÖ Constructors are not inherited,
               // ‚úÖ but parent constructor can be invoked using super() in first line
        System.out.println("Constructor of B");
    }
}


OOP Concepts in Java with Real-Life Example
Let‚Äôs build a mini-project:
Example:
abstract class Vehicle {
    abstract void start();
}

class Bike extends Vehicle {
    void start() {
        System.out.println("Bike starts with kick");
    }
}

class Car extends Vehicle {
    void start() {
        System.out.println("Car starts with button");
    }
}

public class TestVehicle {
    public static void main(String[] args) {
        Vehicle v1 = new Bike();
        Vehicle v2 = new Car();
        v1.start();
        v2.start();
    }
}
‚úîÔ∏è This small program demonstrates abstraction, inheritance, and polymorphism together.

11) Difference between Overloading and Overriding?
i) Definition ‚Äì Overloading means same method name but different parameter lists in the same class, whereas Overriding means same method signature in subclass to redefine behavior.
ii) Binding Time ‚Äì Overloading is resolved at compile time (compile-time polymorphism), whereas Overriding is resolved at runtime (runtime polymorphism).
iii) Inheritance Requirement ‚Äì Overloading does not require inheritance, whereas Overriding always requires inheritance.
iv) Return Type ‚Äì Overloading can have different return types if parameters differ, whereas Overriding must have the same return type (or covariant).
v) Access Modifiers ‚Äì Overloading allows any access modifier, whereas Overriding cannot use a more restrictive access modifier than the superclass method.
vi) Static/Final Methods ‚Äì Overloading can be applied to static or final methods, whereas Overriding cannot override static or final methods.



12) Difference between interface & abstract class? or What is an Interface and how is it different from Abstract Class?
-------------------------------------------------
a. interface supports mulitple inheritance but abstract class does not support multiple inheritance
b. All variables in an interface by default are final & static whereas inside abstract class we can create static/non static/final variables
‚úÖ Interface
An interface is a blueprint of a class that contains abstract methods (i.e., methods without a body).
From Java 8 onwards, interfaces can also contain default and static methods with implementations.
Interfaces are used to define contracts or capabilities (e.g., Runnable, Serializable).
A class implements an interface using the implements keyword.
Multiple interfaces can be implemented by a single class (supports multiple inheritance).

‚úÖ Abstract Class
An abstract class is a partially implemented class that can contain both abstract methods (without body) and concrete methods (with body).
It can also have constructors, instance variables, and any type of method (static, final, private, etc.).
A class extends an abstract class using the extends keyword.
Only one abstract class can be extended by a subclass (does not support multiple inheritance).

// Abstract class: Represents a generic concept of a Vehicle
abstract class Vehicle {

    // Abstract method: No body here ‚Üí subclasses MUST provide an implementation
    abstract void start();

    // Concrete method: Already has an implementation ‚Üí can be used directly or overridden
    void fuelUp() {
        System.out.println("Refueling vehicle...");
    }

    // Concrete method: Shared functionality
    void stop() {
        System.out.println("Vehicle stopped.");
    }
}

// Concrete subclass: Car
class Car extends Vehicle {

    // Providing implementation for abstract method 'start'
    @Override
    void start() {
        System.out.println("Car started with a key ignition.");
    }
}

// Another concrete subclass: Bike
class Bike extends Vehicle {

    // Providing implementation for abstract method 'start'
    @Override
    void start() {
        System.out.println("Bike started with a self-start button.");
    }
}

// Main class to run the example
public class AbstractClassExample {
    public static void main(String[] args) {

        // We cannot create objects of an abstract class directly:
        // Vehicle v = new Vehicle(); // ‚ùå Compilation error

        // Creating Car object
        Vehicle myCar = new Car();
        myCar.start();   // Calls Car's implementation
        myCar.fuelUp();  // Uses Vehicle's implementation
        myCar.stop();    // Uses Vehicle's implementation

        System.out.println("----");

        // Creating Bike object
        Vehicle myBike = new Bike();
        myBike.start();  // Calls Bike's implementation
        myBike.fuelUp(); // Uses Vehicle's implementation
        myBike.stop();   // Uses Vehicle's implementation
    }
}



| Method           | What it hides                        | Can it have method body?   |
| ---------------- | ------------------------------------ | -------------------------- |
| `Abstract Class` | Partially hides implementation       | Yes (some methods)         |
| `Interface`      | Fully hides implementation (usually) | No (Java 7 no body), Yes (Java 8+) |

üìå Key Differences (Interview Quick Points)
Multiple Inheritance ‚Äì Interface supports multiple inheritance, whereas Abstract class does not.
Variables ‚Äì In an interface, variables are public static final by default, whereas in an abstract class, variables can be of any type with any access modifier.
Method Body ‚Äì In interfaces (till Java 7) methods cannot have a body; from Java 8, they can have default and static methods with a body, whereas abstract classes can always have both abstract and concrete methods.
Purpose ‚Äì An interface defines a contract (capabilities to be implemented), whereas an abstract class defines partial implementation along with shared code.
Inheritance Type ‚Äì A class uses implements for an interface, whereas it uses extends for an abstract class.


13) Explain Aggregation with an example?
Answer: Aggregation is a ‚ÄúHas-A‚Äù relationship with weaker association.

Example: Department has multiple Employees.

class Employee {
    String name;
}

class Department {
    List<Employee> employees;
}

14) Can you explain the SOLID principles in relation to OOP in Java?
Answer:
S ‚Äì Single Responsibility Principle
O ‚Äì Open/Closed Principle
L ‚Äì Liskov Substitution Principle
I ‚Äì Interface Segregation Principle
D ‚Äì Dependency Inversion Principle

15) What is the role of the super keyword in Java?
Answer:Refers to the parent class constructor/method/field.
Example: super() calls the superclass constructor.

16) What is the role of this keyword in Java?
Answer:Refers to the current instance of the class. Useful to resolve ambiguity between instance variables and parameters.
Static methods cannot use this or access instance variables directly.

17) What is method hiding in Java?
Answer:If a subclass defines a static method with the same signature as in parent class, it is called method hiding.
Only applicable to static methods.

18) Explain Constructor Overloading ? 
Answer:Having multiple constructors in a class with different parameter lists. Helps in creating objects in different ways.
class Person {
    Person() {}
    Person(String name) {}
}

19) Can we override a static method in Java ?
Answer:No. Static methods are class-level and not subject to runtime polymorphism. We can hide them but not override them.

20) What is Covariant Return Type?
Answer:When overriding a method, the return type of the overriding method can be a subclass of the return type declared in the parent class.

21)Constructor Chaining?
---------------------
-> When we call one constructor from another constructor it will form chain like flow structure. This is called as constructor chaining
-> This can be achieved by using this() keyword or Creating Object in another constructor


22) What is Object Cloning?
Answer: Creating an exact copy of an object using the clone() method.
The class should implement Cloneable interface.

23) What is the difference between an abstract class and an interface in Java 8?
Answer:Abstract class can have both abstract and concrete methods; interfaces can have default and static methods (from Java 8).
Interfaces support multiple inheritance; abstract classes don‚Äôt.

24) Can we instantiate an abstract class?
Answer: No. Abstract classes cannot be instantiated directly. They must be subclassed, and their abstract methods implemented.

25) What is constructor chaining in Java?
Answer:Constructor chaining refers to calling one constructor from another within the same class using this() or from parent class using super().

26) What is the default access modifier for a class in Java?
Answer:If no access modifier is specified, the class has default (package-private) access

27) What is final keyword in OOP concepts?
Answer:final can be used with:
final Variables ‚Äì Makes value constant you can not change in future.
final Methods ‚Äì Prevents overriding you can not override that method.
final Classes ‚Äì Prevents inheritance you can not extends that class.

finally->finally is a keyword,its a block we need to use finally with try catch block
finally block used to closing resources->DB connection close,file close ,session close
finally block always execute.

finalize-> finalize() is a method (not a keyword) of Object class that is called by the Garbage Collector before destroying an object to allow cleanup. 
It is not a keyword.
Deprecated since Java 9 ‚Üí replaced by try-with-resources or Cleaner API.

28) What is a nested class in Java?
Answer:A class defined inside another class. Types:
Static nested class
Inner class
Local class
Anonymous class

29) Can a constructor be overridden in Java?
Answer: No. Constructors cannot be overridden because they are not inherited.

30) What is multiple inheritance and how does Java solve it?
Answer:Multiple inheritance refers to a class having more than one parent.
Java solves potential conflicts using interfaces with default methods and explicitly overriding them.

31) What is diamond problem in OOP and how does Java handle it?
Answer:The diamond problem occurs in multiple inheritance when two superclasses define the same method.
Java avoids it by disallowing multiple inheritance of classes and using interfaces with explicit overrides.

32) What is the purpose of instanceof in Java?
Answer:instanceof checks whether an object is an instance of a particular class or subclass.

What is Association in Java?
Association represents a relationship between two classes, where one class uses the functionalities of another class. It is represented as IS-A relationship
Example: A Teacher teaches Students.

What is Composition in Java?
Composition is a strong form of association where the existence of one class depends on the other. If the container object is destroyed, so are the contained objects. Also called a has-A relationship
Example: A House has Rooms. Without the House, Rooms don‚Äôt exist.

What is Aggregation in Java?
Aggregation is a weaker form of association, where one class can exist independently of the other.
Example: A Department has Teachers. Teachers can exist even if the Department is removed.
 
What is Single Inheritance in Java?
Single inheritance refers to a child class inheriting from only one parent class. Java supports single inheritance to maintain simplicity and avoid ambiguity in code.
class Animal { }
class Dog extends Animal { }

What is the difference between shallow copy and deep copy?
Feature	 Shallow Copy	Deep Copy
Definition	Copies reference	Copies object and nested objects
Default in Java	clone() (by default)	Custom implementation required



