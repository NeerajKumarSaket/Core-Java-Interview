Core Java Interview Questions SRC- https://javacody.com/top-60-java-interview-questions/
1. What is Java and why is it so popular?
Java is a versatile, class-based, object-oriented programming language developed by Sun Microsystems and now owned by Oracle.
Its popularity stems from being platform-independent—“write once, run anywhere” via the Java Virtual Machine (JVM). 
Java’s stability, security, and wide adoption in enterprise applications, mobile apps (Android), web servers, and embedded systems contribute to its global usage. 
It also offers a vast ecosystem of libraries and tools, making it ideal for scalable application development.
Java is also backward-compatible and has a strong developer community, making it one of the most reliable programming languages for both beginners and experts.

2. What is the difference between JDK, JRE, and JVM?
JDK (Java Development Kit): Contains development tools like the compiler (javac) and debugger along with the JRE.
JRE (Java Runtime Environment): Provides the environment to run Java applications; it includes JVM and standard libraries.
JVM (Java Virtual Machine): Executes the bytecode generated by the compiler. It’s platform-dependent but ensures Java programs are platform-independent.
These components together form the core of Java’s architecture and enable cross-platform support.

3. What are the main features of Java?
Java offers several powerful features:

Object-Oriented
Platform Independent
Secure and Robust
Multithreaded
Distributed
Architecture-neutral
Its automatic garbage collection, memory management, and vast API support make it one of the most efficient programming languages for large-scale application development.

4. Explain the concept of OOP in Java.
Java is based on Object-Oriented Programming (OOP), which revolves around:

Encapsulation: Wrapping data and code.
Abstraction: Hiding complex details.
Inheritance: Reusing code.
Polymorphism: Multiple forms of a method.
These pillars enable Java to build modular, maintainable, and scalable code, making it ideal for enterprise-level applications.

5. What is the difference between overloading and overriding?
Overloading: Defining multiple methods with the same name but different parameters within the same class.
Overriding: Subclass provides a specific implementation of a method already defined in the parent class.
Overloading happens at compile-time, while overriding occurs at runtime.

6. What are constructors in Java?
A constructor initializes an object when it is created. It has the same name as the class and no return type. Java supports:
Default Constructors
Parameterized Constructors
Constructor Overloading
If no constructor is defined, Java automatically provides a default one.

7. What is the difference between ‘==’ and .equals() in Java?
==: Compares references (memory locations).
.equals(): Compares the contents (values) of objects.
For example, with strings:
String a = new String("hello");
String b = new String("hello");
System.out.println(a == b); // false
System.out.println(a.equals(b)); // true

8. Explain the concept of inheritance in Java.
Inheritance allows one class to inherit fields and methods from another, promoting code reuse and method overriding.
class Animal {
   void eat() { System.out.println("eating..."); }
}
class Dog extends Animal {
   void bark() { System.out.println("barking..."); }
}
Java supports single, multilevel, and hierarchical inheritance but not multiple inheritance using classes.

9. What is the difference between static methods, static variables, and static classes in Java?
1. Static Variables
Definition: A static variable (also called a class variable) is a variable declared with the static keyword. It belongs to the class rather than any specific instance of the class.
Key Characteristics:
Shared Across Instances: All instances of the class share the same copy of the static variable. Changes to the variable affect all instances.
Memory Allocation: Allocated when the class is loaded into memory, and it persists for the lifetime of the program.(e.g., ClassName.variableName)

2. Static Methods
Definition: A static method is a method declared with the static keyword. It belongs to the class rather than any specific instance.
Key Characteristics:
No Instance Required: Can be called using the class name (e.g., ClassName.methodName()) without creating an instance.
Access Restrictions: Cannot directly access non-static (instance) variables or methods because they require an instance, but they can access static variables and other static methods.

3. Static Classes
Definition: In Java, a "static class" refers to a nested static class (a class declared with the static keyword inside another class). Top-level classes cannot be static in Java.
Key Characteristics:
Nested Static Class: A static nested class is associated with the enclosing class, not with instances of the enclosing class.
No Outer Instance Required: Unlike non-static (inner) classes, a static nested class does not require an instance of the enclosing class to be instantiated.

Static members belong to the class, not to instances. 
A static variable means one shared copy across all objects, often used for counters or constants. Static methods are class-level methods, like utility methods in Math, which don’t need an object. 
Static classes can only be nested, and they are tied to the outer class itself, not its objects


Ques.10) 









====================================
Topic ==OOPs
===================================




=====================================

TOPIC7:COLLCTION

1.what is collection?
2.what are collections in java?
3.defference between collection and colections in java?
4.defference between arrayList and LinkedList?
5.difference between hashmap and hashset?
6.difference between hashmap and concurrenthashmap?

topic-
jpa repo vs crudjpa repo in 


Ques Spring Dependency Injection ?
Ans.-Dependency Injection is the main functionality provided by Spring IOC(Inversion of Control). The Spring-Core module is responsible for injecting dependencies through either Constructor or Setter methods. The design principle of Inversion of Control emphasizes keeping the Java classes independent of each other and the container frees them from object creation and maintenance.


